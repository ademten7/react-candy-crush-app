{"version":3,"sources":["components/ScoreBoard.js","images/blue-candy.png","images/green-candy.png","images/orange-candy.png","images/purple-candy.png","images/red-candy.png","images/yellow-candy.png","images/blank.png","images/Leo.jpg","App.js","index.js"],"names":["ScoreBoard","score","className","candyColors","blueCandy","orangeCandy","purpleCandy","redCandy","yellowCandy","greenCandy","App","useState","currentColorArrangement","setCurrentColorArrangement","squareBeingDragged","setSquareBeingDragged","squareBeingReplaced","setSquareBeingReplaced","scoreDisplay","setScoreDisplay","checkForColumnOfFour","i","columnOfFour","width","decidedColor","isBlank","blank","every","square","forEach","checkForRowOfFour","rowOfFour","includes","checkForColumnOfThree","columnOfThree","checkForRowOfThree","rowOfThree","moveIntoSquareBelow","randomNumber","Math","floor","random","length","dragStart","e","target","dragDrop","dragEnd","squareBeingDraggedId","parseInt","getAttribute","squareBeingReplacedId","validMove","isAColumnOfFour","isARowOfFour","isAColumnOfThree","isARowOfThree","useEffect","randomColorArrangement","randomColor","push","createBoard","timer","setInterval","clearInterval","src","leo","alt","height","map","candyColor","index","draggable","onDragStart","onDragOver","preventDefault","onDragEnter","onDragLeave","onDrop","onDragEnd","type","onClick","window","location","reload","reactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fc365b77.chunk.js","sourcesContent":["const ScoreBoard = ({ score }) => {\n  return (\n    <div className=\"score-board\">\n      <h2>{score}</h2>\n    </div>\n  );\n};\n\nexport default ScoreBoard;\n","export default __webpack_public_path__ + \"static/media/blue-candy.73120c15.png\";","export default __webpack_public_path__ + \"static/media/green-candy.599f7016.png\";","export default __webpack_public_path__ + \"static/media/orange-candy.f106b2cd.png\";","export default __webpack_public_path__ + \"static/media/purple-candy.ae25b8a5.png\";","export default __webpack_public_path__ + \"static/media/red-candy.3658b37c.png\";","export default __webpack_public_path__ + \"static/media/yellow-candy.a3d87a9b.png\";","export default __webpack_public_path__ + \"static/media/blank.fbcb9179.png\";","export default __webpack_public_path__ + \"static/media/Leo.e9e6657c.jpg\";","import { useEffect, useState } from \"react\";\nimport ScoreBoard from \"./components/ScoreBoard\";\nimport blueCandy from \"./images/blue-candy.png\";\nimport greenCandy from \"./images/green-candy.png\";\nimport orangeCandy from \"./images/orange-candy.png\";\nimport purpleCandy from \"./images/purple-candy.png\";\nimport redCandy from \"./images/red-candy.png\";\nimport yellowCandy from \"./images/yellow-candy.png\";\nimport blank from \"./images/blank.png\";\nimport leo from \"./images/Leo.jpg\";\nimport \"./App.scss\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst width = 8;\nconst candyColors = [\n  blueCandy,\n  orangeCandy,\n  purpleCandy,\n  redCandy,\n  yellowCandy,\n  greenCandy,\n];\n\nconst App = () => {\n  const [currentColorArrangement, setCurrentColorArrangement] = useState([]);\n  const [squareBeingDragged, setSquareBeingDragged] = useState(null);\n  const [squareBeingReplaced, setSquareBeingReplaced] = useState(null);\n  const [scoreDisplay, setScoreDisplay] = useState(0);\n\n  const checkForColumnOfFour = () => {\n    for (let i = 0; i <= 39; i++) {\n      const columnOfFour = [i, i + width, i + width * 2, i + width * 3];\n      const decidedColor = currentColorArrangement[i];\n      const isBlank = currentColorArrangement[i] === blank;\n\n      if (\n        columnOfFour.every(\n          (square) =>\n            currentColorArrangement[square] === decidedColor && !isBlank\n        )\n      ) {\n        setScoreDisplay((score) => score + 4);\n        columnOfFour.forEach(\n          (square) => (currentColorArrangement[square] = blank)\n        );\n        return true;\n      }\n    }\n  };\n\n  const checkForRowOfFour = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfFour = [i, i + 1, i + 2, i + 3];\n      const decidedColor = currentColorArrangement[i];\n      const notValid = [\n        5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53,\n        54, 55, 62, 63, 64,\n      ];\n      const isBlank = currentColorArrangement[i] === blank;\n\n      if (notValid.includes(i)) continue;\n\n      if (\n        rowOfFour.every(\n          (square) =>\n            currentColorArrangement[square] === decidedColor && !isBlank\n        )\n      ) {\n        setScoreDisplay((score) => score + 4);\n        rowOfFour.forEach(\n          (square) => (currentColorArrangement[square] = blank)\n        );\n        return true;\n      }\n    }\n  };\n\n  const checkForColumnOfThree = () => {\n    for (let i = 0; i <= 47; i++) {\n      const columnOfThree = [i, i + width, i + width * 2];\n      const decidedColor = currentColorArrangement[i];\n      const isBlank = currentColorArrangement[i] === blank;\n\n      if (\n        columnOfThree.every(\n          (square) =>\n            currentColorArrangement[square] === decidedColor && !isBlank\n        )\n      ) {\n        setScoreDisplay((score) => score + 3);\n        columnOfThree.forEach(\n          (square) => (currentColorArrangement[square] = blank)\n        );\n        return true;\n      }\n    }\n  };\n\n  const checkForRowOfThree = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfThree = [i, i + 1, i + 2];\n      const decidedColor = currentColorArrangement[i];\n      const notValid = [\n        6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64,\n      ];\n      const isBlank = currentColorArrangement[i] === blank;\n\n      if (notValid.includes(i)) continue;\n\n      if (\n        rowOfThree.every(\n          (square) =>\n            currentColorArrangement[square] === decidedColor && !isBlank\n        )\n      ) {\n        setScoreDisplay((score) => score + 3);\n        rowOfThree.forEach(\n          (square) => (currentColorArrangement[square] = blank)\n        );\n        return true;\n      }\n    }\n  };\n  //to move colors below\n  const moveIntoSquareBelow = () => {\n    //64-width ===>i cannot move the lasts squares to below they are static\n    for (let i = 0; i <= 55; i++) {\n      //to fill the empty squaere on top\n\n      const firstRow = [0, 1, 2, 3, 4, 5, 6, 7];\n      const isFirstRow = firstRow.includes(i);\n\n      if (isFirstRow && currentColorArrangement[i] === blank) {\n        let randomNumber = Math.floor(Math.random() * candyColors.length);\n        currentColorArrangement[i] = candyColors[randomNumber];\n      }\n      //if there is an empty square under the target color, assign to empty square target color\n\n      if (currentColorArrangement[i + width] === blank) {\n        currentColorArrangement[i + width] = currentColorArrangement[i];\n        //and make the target color blank\n        currentColorArrangement[i] = blank;\n      }\n    }\n  };\n\n  ///drag functions\n  //click on the target\n  const dragStart = (e) => {\n    setSquareBeingDragged(e.target);\n  };\n  const dragDrop = (e) => {\n    setSquareBeingReplaced(e.target);\n  };\n  const dragEnd = () => {\n    const squareBeingDraggedId = parseInt(\n      squareBeingDragged.getAttribute(\"data-id\")\n    );\n    const squareBeingReplacedId = parseInt(\n      squareBeingReplaced.getAttribute(\"data-id\")\n    );\n\n    currentColorArrangement[squareBeingReplacedId] =\n      squareBeingDragged.getAttribute(\"src\");\n    currentColorArrangement[squareBeingDraggedId] =\n      squareBeingReplaced.getAttribute(\"src\");\n\n    const validMoves = [\n      squareBeingDraggedId - 1,\n      squareBeingDraggedId - width,\n      squareBeingDraggedId + 1,\n      squareBeingDraggedId + width,\n    ];\n    //to limit the movement for  only below and up\n    const validMove = validMoves.includes(squareBeingReplacedId);\n\n    const isAColumnOfFour = checkForColumnOfFour();\n    const isARowOfFour = checkForRowOfFour();\n    const isAColumnOfThree = checkForColumnOfThree();\n    const isARowOfThree = checkForRowOfThree();\n\n    if (\n      squareBeingReplacedId &&\n      validMove &&\n      (isARowOfThree || isARowOfFour || isAColumnOfFour || isAColumnOfThree)\n    ) {\n      setSquareBeingDragged(null);\n      setSquareBeingReplaced(null);\n    } else {\n      currentColorArrangement[squareBeingReplacedId] =\n        squareBeingReplaced.getAttribute(\"src\");\n      currentColorArrangement[squareBeingDraggedId] =\n        squareBeingDragged.getAttribute(\"src\");\n      setCurrentColorArrangement([...currentColorArrangement]);\n    }\n  };\n\n  //to create 64 items\n\n  const createBoard = () => {\n    const randomColorArrangement = [];\n    for (let i = 0; i < width * width; i++) {\n      const randomColor =\n        candyColors[Math.floor(Math.random() * candyColors.length)];\n      randomColorArrangement.push(randomColor);\n    }\n    setCurrentColorArrangement(randomColorArrangement);\n  };\n\n  useEffect(() => {\n    createBoard();\n  }, []);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      checkForColumnOfFour();\n      checkForRowOfFour();\n      checkForColumnOfThree();\n      checkForRowOfThree();\n      moveIntoSquareBelow();\n      setCurrentColorArrangement([...currentColorArrangement]);\n    }, 100);\n    return () => clearInterval(timer);\n  }, [\n    checkForColumnOfFour,\n    checkForRowOfFour,\n    checkForColumnOfThree,\n    checkForRowOfThree,\n    moveIntoSquareBelow,\n    currentColorArrangement,\n  ]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"app container\">\n        <div className=\"header-image\">\n          <img src={leo} alt=\"leo\" width=\"300\" height=\"200\" />\n          <h1 className=\"header\">Sinem's Candy Crush Game</h1>\n        </div>\n        <div className=\"game-scoreboard\">\n          <div className=\"game\">\n            {currentColorArrangement.map((candyColor, index) => (\n              <img\n                key={index}\n                src={candyColor}\n                alt={candyColor}\n                // data-id={index}==> a custom attribute that stores data.\n                //it gives which element we will drag\n                data-id={index}\n                draggable={true}\n                onDragStart={dragStart}\n                onDragOver={(e) => e.preventDefault()}\n                onDragEnter={(e) => e.preventDefault()}\n                onDragLeave={(e) => e.preventDefault()}\n                onDrop={dragDrop}\n                onDragEnd={dragEnd}\n              />\n            ))}\n          </div>\n          <ScoreBoard score={scoreDisplay} />\n          <button\n            type=\"button\"\n            className=\"btn btn-success\"\n            onClick={() => window.location.reload(false)}\n          >\n            REPLAY\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","\nimport React from \"react\"\nimport App from \"./App.js\"\nimport reactDOM from \"react-dom\"\n\nreactDOM.render(<App/>,document.getElementById(\"root\"))"],"sourceRoot":""}